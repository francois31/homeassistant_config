# Boite aux lettres
# Fonctions:
#   - detection présence lettre
#       - détecteur IR
#
#   - détection passage pont
#
#   - mesure Température et humidité
#
#   - alimentation par panneau solaire + batterie
#


esphome:
  name: bal

esp8266:
  board: d1_mini

# Enable logging
logger:
  level: DEBUG 
  baud_rate: 115200

# Enable Home Assistant API
api:

ota:
  password: "1336113ef90165687c93bca641650e05"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.54
    gateway: 192.168.0.1
    subnet: 255.255.255.0
#  output_power: 10dB
#  fast_connect: true
#  power_save_mode: light
#  power_save_mode: HIGH

web_server:
  port: 80

captive_portal:

http_request:
  useragent: esphome/device
  timeout: 10s
  esp8266_disable_ssl_support: true

sensor:
  - platform: template
    name: "P_205_5"
    id: p205_5
    update_interval: 60s
    lambda: |-

      WiFiClientSecure client;
      client.setInsecure();
      client.connect("https://192.168.0.40", 443);
      
      float P_205_5 = 0;
      
      const char* http_username = "m2madmin";
      const char* http_password = "FmTyt8TyRTjf";

      
      const char* root_ca= \
      "-----BEGIN CERTIFICATE-----\n" \
      "MIIBwjCCAWmgAwIBAgIUJdKYWRTHBFo7HnedT3yHGvGpDaMwCgYIKoZIzj0EAwIw\n" \
      "OjEbMBkGA1UEAwwSUk4tMjAxOS1XMzMtMS00NjE0MRswGQYDVQQKDBJTY2huZWlk\n" \
      "ZXIgRWxlY3RyaWMwHhcNMjIwMjE0MDQ0MzQ1WhcNMjMwMjE0MDQ0MzQ1WjA6MRsw\n" \
      "GQYDVQQDDBJSTi0yMDE5LVczMy0xLTQ2MTQxGzAZBgNVBAoMElNjaG5laWRlciBF\n" \
      "bGVjdHJpYzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDo4PHg5yBPnF6zWn39c\n" \
      "qsVN67x+o/wWl2tkcxZBdKPBTtLqe5j0klBwQ+4cJ65wuEn40OLWTzYo1JbF7Krr\n" \
      "I0ajTTBLMA8GA1UdEwQIMAYBAQACAQAwDgYDVR0PAQH/BAQDAgWgMCgGA1UdEQQh\n" \
      "MB+GDzE2OS4yNTQuMTY5LjEzNIYMMTkyLjE2OC4wLjQwMAoGCCqGSM49BAMCA0cA\n" \
      "MEQCIDIQqrH0NF7hUlS1gLPatu0tVFzdtCOvyWSIqg6w/6VyAiA+Eylwv4Ur4U5m\n" \
      "SJSe9ASpQR6Gzx+0sV7lZiYxCCUHxA==\n" \
      "-----END CERTIFICATE-----\n";

      HTTPClient http;
      
      http.begin(client,"https://192.168.0.40/rsa1/MeterInstantData");   // , root_ca

      //http.begin(client, host);
      http.setAuthorization(http_username, http_password);
      http.setTimeout(10);

      
      int http_error = http.GET();
      if (http_error <= 0) {
        ESP_LOGD("P_205_5_http.GET", "http.GET() failed with code %s", http.errorToString(http_error).c_str());
      } else {
        DynamicJsonDocument doc(1024);
        auto error = deserializeJson(doc, http.getStream() );
        if (error) {
            ESP_LOGD("P_205_5_http.GET", "deserializeJson() failed with code %s", error.c_str());
        } else {
          float P_205_5 = atof(doc["P"]);
        }
      }
      return P_205_5;
