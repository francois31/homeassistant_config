esphome:
  name: esp32-tic

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "c2a77599f8e10e67806efed35c6691c7"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  reboot_timeout: 10min
  manual_ip:
    static_ip: 192.168.0.62
    gateway: 192.168.0.1
    subnet: 255.255.255.0
  output_power: 10dB
  fast_connect: true
#  power_save_mode: light
#  power_save_mode: HIGH


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32-Tic Fallback Hotspot"
    password: "jFNgD895dOye"

captive_portal:
    
web_server:
  port: 80


uart:
  id: uart_bus
  rx_pin: GPIO17
  baud_rate: 1200
  parity: EVEN
  data_bits: 7

teleinfo:
  id: esp_teleinfo
  update_interval: 60s
  historical_mode: true
  uart_id: uart_bus

binary_sensor:
  - platform: status
    id: teleinfo_status
    name: "Teleinfo Status"

sensor:
  - platform: wifi_signal
    name: "Signal wifi"
    update_interval: 60s
    unit_of_measurement: dB
    accuracy_decimals: 0
    force_update: false
    icon: mdi:wifi
    
  - platform: uptime
    id: uptime_seconds
    name: "Uptime Sensor"
    update_interval: 60s
    unit_of_measurement: s
    accuracy_decimals: 0
    force_update: false
    icon: mdi:timer
    
#-----------------------------------------------
# Abonnement de Base
#-----------------------------------------------
  - platform: teleinfo
    tag_name: "BASE"
    name: "Index"
#    unit_of_measurement: "Wh"
    unit_of_measurement: "kWh"
    device_class: "energy"
    state_class: "total_increasing"
    accuracy_decimals: 3 
    filters:
      - multiply: 0.001
    icon: mdi:gauge
    id: index_base
    

#-----------------------------------------------
# Abonnement HC/HP
#-----------------------------------------------
#  - platform: teleinfo
#    tag_name: "HCHC"
#    id: hchc
#    name: "Teleinfo index_hc_kwh"
#    unit_of_measurement: "kWh"
#    device_class: "energy"
#    state_class: "total_increasing"
#    accuracy_decimals: 3 
#    filters:
#      - multiply: 0.001
#    icon: mdi:gauge

#  - platform: teleinfo
#    tag_name: "HCHP"
#    id: hchp
#    unit_of_measurement: "kWh"
#    device_class: "energy"
#    state_class: "total_increasing"
#    name: "Teleinfo index_hp_kwh"
#    accuracy_decimals: 3 
#    filters:
#      - multiply: 0.001
#    icon: mdi:gauge

  - platform: teleinfo
    tag_name: "IINST"
    name: "Intensit√©"
    unit_of_measurement: "A"
    icon: mdi:current-ac

  - platform: teleinfo
    tag_name: "PAPP"
    name: "Puissance"
    unit_of_measurement: "VA"
    icon: mdi:flash

button:
  - platform: restart
    name: "Teleinfo Restart"

text_sensor:
  - platform: teleinfo
    tag_name: "PTEC"
    name: "Tarif actuel"
    icon: mdi:clock-time-nine-outline

  - platform: teleinfo
    tag_name: "ADCO"
    name: "Adresse du compteur"
    icon: mdi:home-map-marker

  - platform: teleinfo
    tag_name: "OPTARIF"
    name: "Option tarifaire choisie"
    icon: mdi:currency-eur

  - platform: template
    name: Uptime
    update_interval: 60s
    icon: mdi:clock-start
    lambda: |-
      int seconds = (id(uptime_seconds).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
      